/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package QKART_SANITY_LOGIN.Module1;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.WindowType;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import sun.plugin2.util.BrowserType;

public class QkartSanity {

    public static String lastGeneratedUserName;


    public static RemoteWebDriver createDriver() throws MalformedURLException {
        // Launch Browser using Zalenium
        final DesiredCapabilities capabilities = new DesiredCapabilities();
        capabilities.setBrowserName(BrowserType.CHROME);
        RemoteWebDriver driver = new RemoteWebDriver(new URL("http://localhost:8082/wd/hub"), capabilities);

        return driver;
    }

    public static void logStatus(String type, String message, String status) {

        System.out.println(String.format("%s |  %s  |  %s | %s", String.valueOf(java.time.LocalDateTime.now()), type,
                message, status));
    }

    public static void takeScreenshot(WebDriver driver, String screenshotType, String description) {
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION - Implement method using below steps
        /*
         * 1. Check if the folder "/screenshots" exists, create if it doesn't
         * 2. Generate a unique string using the timestamp
         * 3. Capture screenshot
         * 4. Save the screenshot inside the "/screenshots" folder using the following
         * naming convention: screenshot_<Timestamp>_<ScreenshotType>_<Description>.png
         * eg: screenshot_2022-03-05T06:59:46.015489_StartTestcase_Testcase01.png
         */

        try {
            File theDir = new File("/screenshots");
            if (!theDir.exists()) {
                theDir.mkdirs();
            }

            String timestamp = String.valueOf(java.time.LocalDateTime.now());
            String fileName = String.format("screenshot_%s_%s_%s.png", timestamp, screenshotType, description);

            TakesScreenshot scrShot = ((TakesScreenshot) driver);
            File SrcFile = scrShot.getScreenshotAs(OutputType.FILE);

            File DestFile = new File("screenshots/" + fileName);
            FileUtils.copyFile(SrcFile, DestFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*
     * Testcase01: Verify the functionality of Login button on the Home page
     */
    public static Boolean TestCase01(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 1: Verify User Registration", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

            // Return False as the test case Fails
            return false;
        } else {
            logStatus("TestCase 1", "Test Case Pass. User Registration Pass", "PASS");
        }

        // Save the last generated username
        // lastGeneratedUserName = registration.lastGeneratedUsername;

        // Visit the login page and login with the previuosly registered user
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;
        }

        // Visit the home page and log out the logged in user
        Home home = new Home(driver);
        status = home.PerformLogout();
        logStatus("End TestCase", "Test Case 1: Verify user Registration : ", status ? "PASS" : "FAIL");

        return status;
    }

    /*
     * Verify that an existing user is not allowed to re-register on QKart
     */
    public static Boolean TestCase02(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start Testcase", "Test Case 2: Verify User Registration with an existing username ", "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        logStatus("Test Step", "User Registration : ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "PASS" : "FAIL");
            return false;

        }

        lastGeneratedUserName = registration.lastGeneratedUsername;

        registration.navigateToRegisterPage();
        status = registration.registerUser(lastGeneratedUserName, "abc@123", false);

        logStatus("End TestCase", "Test Case 2: Verify user Registration : ", status ? "FAIL" : "PASS");
        return !status;
    }

    /*
     * Verify the functinality of the search text box
     */
    public static Boolean TestCase03(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 3", "Start test case : Verify functionality of search box ", "DONE");
        boolean status;

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        Thread.sleep(5000);

        status = homePage.searchForProduct("yonex");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        List<WebElement> searchResults = homePage.getSearchResults();

        if (searchResults.size() == 0) {
            logStatus("TestCase 3", "Test Case Failure. There were no results for the given search string", "FAIL");
            return false;
        }

        for (WebElement webElement : searchResults) {
            SearchResult resultelement = new SearchResult(webElement);

            String elementText = resultelement.getTitleofResult();
            if (!elementText.toUpperCase().contains("YONEX")) {
                logStatus("TestCase 3", "Test Case Failure. Test Results contains un-expected values: " + elementText,
                        "FAIL");
                return false;
            }
        }

        logStatus("Step Success", "Successfully validated the search results ", "PASS");
        Thread.sleep(2000);

        status = homePage.searchForProduct("Gesundheit");
        if (!status) {
            logStatus("TestCase 3", "Test Case Failure. Unable to search for given product", "FAIL");
            return false;
        }

        // Verify no search results are found
        searchResults = homePage.getSearchResults();
        if (searchResults.size() == 0) {
            if (homePage.isNoResultFound()) {
                logStatus("Step Success", "Successfully validated that no products found message is displayed", "PASS");
            }
            logStatus("TestCase 3", "Test Case PASS. Verified that no search results were found for the given text",
                    "PASS");
        } else {
            logStatus("TestCase 3", "Test Case Fail. Expected: no results , actual: Results were available", "FAIL");
            return false;
        }
        return true;
    }

    /*
     * Verify the presence of size chart and check if the size chart content is as
     * expected
     */
    public static Boolean TestCase04(RemoteWebDriver driver) throws InterruptedException {
        logStatus("TestCase 4", "Start test case : Verify the presence of size Chart", "DONE");
        boolean status = false;

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        Thread.sleep(5000);

        status = homePage.searchForProduct("Running Shoes");
        List<WebElement> searchResults = homePage.getSearchResults();

        List<String> expectedTableHeaders = Arrays.asList("Size", "UK/INDIA", "EU", "HEEL TO TOE");
        List<List<String>> expectedTableBody = Arrays.asList(Arrays.asList("6", "6", "40", "9.8"),
                Arrays.asList("7", "7", "41", "10.2"), Arrays.asList("8", "8", "42", "10.6"),
                Arrays.asList("9", "9", "43", "11"), Arrays.asList("10", "10", "44", "11.5"),
                Arrays.asList("11", "11", "45", "12.2"), Arrays.asList("12", "12", "46", "12.6"));

        for (WebElement webElement : searchResults) {
            SearchResult result = new SearchResult(webElement);

            if (result.verifySizeChartExists()) {
                logStatus("Step Success", "Successfully validated presence of Size Chart Link", "PASS");

                status = result.verifyExistenceofSizeDropdown(driver);
                logStatus("Step Success", "Validated presence of drop down", status ? "PASS" : "FAIL");

                if (result.openSizechart()) {
                    if (result.validateSizeChartContents(expectedTableHeaders, expectedTableBody, driver)) {
                        logStatus("Step Success", "Successfully validated contents of Size Chart Link", "PASS");
                    } else {
                        logStatus("Step Failure", "Failure while validating contents of Size Chart Link", "FAIL");
                    }

                    status = result.closeSizeChart(driver);

                } else {
                    logStatus("TestCase 4", "Test Case Fail. Failure to open Size Chart", "FAIL");
                    return false;
                }

            } else {
                logStatus("TestCase 4", "Test Case Fail. Size Chart Link does not exist", "FAIL");
                return false;
            }
        }
        logStatus("TestCase 4", "Test Case PASS. Validated Size Chart Details", "PASS");
        return status;
    }

    /*
     * Verify the complete flow of checking out and placing order for products is
     * working correctly
     */
    public static Boolean TestCase05(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 5: Verify Happy Flow of buying products", "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("TestCase 5", "Test Case Failure. Happy Flow Test Failed", "FAIL");
        }

        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();

        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "Test Case 5: Happy Flow Test Failed : ", status ? "PASS" : "FAIL");
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        status = homePage.searchForProduct("Tan");
        homePage.addProductToCart("Tan Leatherette Weekender Duffle");

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);

        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 5: Happy Flow Test Completed : ", status ? "PASS" : "FAIL");
        return status;
    }

    /*
     * Verify the quantity of items in cart can be updated
     */
    public static Boolean TestCase06(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase", "Test Case 6: Verify that cart can be edited", "DONE");
        Home homePage = new Home(driver);
        Register registration = new Register(driver);
        Login login = new Login(driver);

        // TODO: CRIO_TASK_MODULE_TEST_AUTOMATION - TEST CASE 06: MILESTONE 5

        // TODO: Register a new user

        // Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);

        // TODO: Login using the newly registed user

        // login.navigateToLoginPage();
        lastGeneratedUserName = registration.lastGeneratedUsername;

        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        // TODO: Add "Xtend Smart Watch" to cart

        status = homePage.searchForProduct("Xtend Smart Watch");
        homePage.addProductToCart("Xtend Smart Watch");


        // TODO: Add "Yarine Floor Lamp" to cart

        status = homePage.searchForProduct("Yarine Floor Lamp");
        homePage.addProductToCart("Yarine Floor Lamp");

        // update watch quantity to 2
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 2);

        Thread.sleep(5000);
        // update table lamp quantity to 0
        homePage.changeProductQuantityinCart("Yarine Floor Lamp", 0);
        Thread.sleep(5000);
        // update watch quantity again to 1
        homePage.changeProductQuantityinCart("Xtend Smart Watch", 1);
        Thread.sleep(5000);
        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = driver.getCurrentUrl().endsWith("/thanks");

        homePage.navigateToHome();
        Thread.sleep(3000);
        homePage.PerformLogout();

        logStatus("End TestCase", "Test Case 6: Verify that cart can be edited: ", status ? "PASS" : "FAIL");
        return status;
    }


    public static Boolean TestCase07(RemoteWebDriver driver) throws InterruptedException {
        Boolean status;
        logStatus("Start TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough",
                "DONE");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();
        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Step Failure", "User Perform Registration Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase",
                    "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                    status ? "PASS" : "FAIL");
            return false;
        }

        Home homePage = new Home(driver);
        homePage.navigateToHome();
        status = homePage.searchForProduct("Stylecon");
        homePage.addProductToCart("Stylecon 9 Seater RHS Sofa Set");
        Thread.sleep(3000);

        homePage.changeProductQuantityinCart("Stylecon 9 Seater RHS Sofa Set", 10);

        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        status = checkoutPage.verifyInsufficientBalanceMessage();

        logStatus("End TestCase",
                "Test Case 7: Verify that insufficient balance error is thrown when the wallet balance is not enough: ",
                status ? "PASS" : "FAIL");

        return status;
    }

    public static Boolean TestCase08(RemoteWebDriver driver) throws InterruptedException {

        Boolean status = false;

        driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        // visiting the registration page and registring a new user
        logStatus("Start TestCase", "Test Case 8: Verify the content of cart", "DONE");

        // Visit the Registration page and register a new user
        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            takeScreenshot(driver, "StartTestCase", "TestCase08");
            logStatus("TestCase 8", "Test Case Pass. User Registration Pass", "FAIL");
            logStatus("End TestCase", "Test Case 8: Verify user Registration : ",
                    status ? "PASS" : "FAIL");

            // Return False as the test case Fails

            return false;
        } else {
            logStatus("TestCase 8", "Test Case Pass. User Registration Pass", "PASS");
        }
        // Save the last generated username
        lastGeneratedUserName = registration.lastGeneratedUsername;
        // login to qkart with newly created credentials

        Login login = new Login(driver);
        login.navigateToLoginPage();
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        logStatus("Test Step", "User Perform Login: ", status ? "PASS" : "FAIL");
        if (!status) {
            logStatus("End TestCase", "Test Case 8: Verify user Registration : ",
                    status ? "PASS" : "FAIL");
            return false;
        }
        // searching for product

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        // Thread.sleep(5000);
        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");

        List<String> actualProductList = productList(driver);

        driver.switchTo().newWindow(WindowType.TAB);

        driver.get("https://crio-qkart-frontend-qa.vercel.app/");

        // login.navigateToLoginPage();
        // login.PerformLogin(lastGeneratedUserName, "abc@123");

        if(productList(driver).containsAll(actualProductList))
        {
            status = true;
        }

        // WebElement cartContentsOnNewPage = driver.findElement(
        //         By.xpath("//*[@id='root']/div/div/div[3]/div[2]/div/div[1]/div/div[2]/div[1]"));

        // if (cartContentsOnNewPage.isDisplayed()) {
        //     return true;
        // } else {
        //     takeScreenshot(driver, "testcase8 product", "product not found in cart on new page");
        // }

        driver.close();
        Set<String> handles = driver.getWindowHandles();
        driver.switchTo().window(handles.toArray(new String[handles.size()])[0]);
        return status;
    }

    public static List<String> productList(WebDriver driver)
    {
        List<WebElement> tempProductWebElements = driver.findElements(By.xpath("//*[@id='root']/div/div/div[3]/div[2]/div/div/div/div[2]/div[1]"));
        List<String> tempList = new ArrayList<String>();

        for (WebElement temp : tempProductWebElements) {
            tempList.add((temp).getText());
        }
        return tempList;
    }

    public static Boolean TestCase09(RemoteWebDriver driver) throws InterruptedException {
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase", "TestCase09");
        logStatus("Start TestCase",
                "Test Case 9: Check if the privacy policy content is available on the newly opened tab",
                "DONE");

        // Register registration = new Register(driver);
        // registration.navigateToRegisterPage();
        // status = registration.registerUser("testUser", "abc@123", true);
        // if (!status) {
        //     logStatus("Test case 10",
        //             "Test Case failure. Verify privay policy and about us displayed correctly ","FAIL");
        //     takeScreenshot(driver, "Failure", "TestCase10");       

        // }
        // else
        // {
        //     logStatus("Step", "Verify user registration: ", "PASS");
        // }
        // lastGeneratedUserName = registration.lastGeneratedUsername;      

        // Login login = new Login(driver);
        // login.navigateToLoginPage();
        // status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        // logStatus("Test step", "User perform login failed", status ? "PASS" : "FAIL");
        // if (!status) {
        //     logStatus("Step", "Verify user registration", status ? "PASS" : "FAIL");
        //     takeScreenshot(driver, "Failure", "TestCase9");
        //     logStatus("EndTestcase", "TestCase09:Verify privay policy and about us displayed correctly", status ? "PASS" : "FAIL");
        // }

        Home homePage = new Home(driver);
        homePage.navigateToHome();

        String parent = driver.getWindowHandle();
        String url = driver.getCurrentUrl();

        WebElement policyElement = driver.findElement(By.xpath("//*[@id='root']/div/div/div[5]/div[2]/p[1]/a"));
        policyElement.click();
        Thread.sleep(5000);
        // status = driver.getCurrentUrl().equals(url);

        if(!url.equals(driver.getCurrentUrl()))
        {
            return false;
        }
        // if (!status) {
        //     logStatus("Step Failure", "Verify URL of the current tab does not change ", status ? "PASS" : "FAIL");
        //     takeScreenshot(driver, "TestCase Failure", "TestCase09 -3");
        //     logStatus("TestCase09",
        //             "Test Case Failure. Check if the provacy policy content is available only on newly opened tab ",
        //             status ? "PASS" : "FAIL");
        //     return false;
        // }

        Set<String> allWindow = driver.getWindowHandles();
        for(String window : allWindow)
        {
            if(!window.equals(parent))
            {
                driver.switchTo().window(window);
                Thread.sleep(5000);
                WebElement  privacyPolicyHeading = driver.findElement(By.xpath("//*[@id='root']/div/div[2]/h2"));
                status = privacyPolicyHeading.getText().equals("Privacy Policy");
                driver.close();
            }

        }
        // driver.close();
        driver.switchTo().window(parent);

        // if (status) {
        //     logStatus("Test step", "Check if the Priacy policy handling is present in the new tab opened ", status ? "PASS" : "FAIL");

        //     logStatus("TestCase09",
        //             "Test Case Pass. Check if the provacy policy content is available only on newly opened tab ",
        //             status ? "PASS" : "FAIL");
        //     // return false;
        // }

        if(!url.equals(driver.getCurrentUrl()))
        {
            return false;
        }
        driver.findElement(By.xpath("//*[@id='root']/div/div/div[5]/div[2]/p[4]/a")).click();
        status = driver.getCurrentUrl().equals(url);

        Set<String> allWindow1 = driver.getWindowHandles();
        for(String window1 : allWindow1)
        {
            if(!window1.equals(parent))
            {
                driver.switchTo().window(window1);
                Thread.sleep(5000);
                WebElement  privacyPolicyHeading = driver.findElement(By.xpath("//*[@id='root']/div/div[2]/h2"));
                status = privacyPolicyHeading.getText().equals("Terms of Service");
                driver.close();
            }
        }

        driver.switchTo().window(parent);

        logStatus("End Test case ", "TestCase 09: Check privacy and Terms link working ", status ? "PASS" : "FAIL");

        // if (status) {
        //     logStatus("Test step", "Check if the Terms of service handling is present in the new tab opened ", status ? "PASS" : "FAIL");

        //     logStatus("TestCase09",
        //             "Test Case Fail. Check if the Terms of service content is available only on newly opened tab ",
        //             status ? "PASS" : "FAIL");
        //     takeScreenshot(driver, "TestCaseFailure", "TestCase09-4");        
        //     // return false;
        // }

        // if(!url.equals(driver.getCurrentUrl()))
        // {
        //     return false;
        // }

        // driver.findElement(By.xpath("//*[contains(text() ,'About us' )]")).click();
        // status = driver.getCurrentUrl().equals(url);

        // Set<String> allWindow1 = driver.getWindowHandles();
        // for(String window : allWindow)
        // {
        //     if(!window.equals(parent))
        //     {
        //         driver.switchTo().window(window);
        //         WebElement  aboutUsHEading = driver.findElement(By.xpath("//*[@id='root']/div/div[2]/h2"));
        //         status = aboutUsHEading.getText().equals(" About Us");
        //     }
        // }
        // driver.close();
        // driver.switchTo().window(parent);

        // if (status) {
        //     logStatus("Test step", "Check if the About us handling is present in the new tab opened ", status ? "PASS" : "FAIL");

        //     logStatus("TestCase09",
        //             "Test Case Fail. Check if the About us content is available only on newly opened tab ",
        //             status ? "PASS" : "FAIL");
        //     takeScreenshot(driver, "TestCaseFailure", "TestCase09-5");        
        //     // return false;
        // }

        // if(!url.equals(driver.getCurrentUrl()))
        // {
        //     return false;
        // }   

        takeScreenshot(driver, "EndTestCase", "TestCase09");

        // driver.close();

        return status;

    }

    public static Boolean TestCase10(RemoteWebDriver driver) throws InterruptedException {
        Boolean status = false;
        // TODO: CRIO_TASK_MODULE_SYNCHRONISATION -
        takeScreenshot(driver, "StartTestCase10", "Start");
        logStatus("TestCase11", "Testing contact us page", "DONE");
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        driver.findElement(By.xpath("//*[text() = 'Contact us']")).click();
        Thread.sleep(3000);

        driver.findElement(By.xpath("//*[@placeholder='Name']")).sendKeys("crio user");
        driver.findElement(By.xpath("//*[@placeholder='Email']")).sendKeys("criouser@gmail.com");
        driver.findElement(By.xpath("//*[@placeholder='Message']")).sendKeys("Testing the contact us page");

        WebElement contactNow = driver.findElement(By.xpath("//*[text() = ' Contact Now']"));
        contactNow.click();

        WebDriverWait wait = new WebDriverWait(driver, 30);
        wait.until(ExpectedConditions.invisibilityOf(contactNow));

        logStatus("End TestCase 11", "Testing contact us page", "PASS");
        takeScreenshot(driver, "EndTestCase10", "Stop");
        return status;
    }

    public static Boolean TestCase11(RemoteWebDriver driver) throws InterruptedException
    {
        Boolean status = false;

        WebDriverWait wait = new WebDriverWait(driver, 30);
        logStatus("Start Test case", "Ensure that the links on QKART advertisement are clickable ", "DONE");
        takeScreenshot(driver,"StartTestcase", "Testcase 11");

        Register registration = new Register(driver);
        registration.navigateToRegisterPage();

        status = registration.registerUser("testUser", "abc@123", true);
        if (!status) {
            logStatus("Test case 11",
                    "Test Case failure. Ensure that the links on QKART advertisement are clickable ",status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failure", "TestCase11");

        }
        lastGeneratedUserName = registration.lastGeneratedUsername;

        Login login = new Login(driver);
        login.navigateToLoginPage();

        // Login with the newly registered user's credentials
        status = login.PerformLogin(lastGeneratedUserName, "abc@123");
        if (!status) {
            logStatus("Step Failure", "User Perform Login Failed", status ? "PASS" : "FAIL");
            logStatus("End TestCase", "TestCase 11 Ensure that the links on QKART advertisement are clickable ", status ? "PASS" : "FAIL");
            takeScreenshot(driver, "Failure", "TestCase 11");
        }

        // Go to the home page
        Home homePage = new Home(driver);
        homePage.navigateToHome();

        status = homePage.searchForProduct("Yonex");
        homePage.addProductToCart("YONEX Smash Badminton Racquet");
        homePage.changeProductQuantityinCart("YONEX Smash Badminton Racquet", 1);

        Thread.sleep(3000);
        homePage.clickCheckout();

        Checkout checkoutPage = new Checkout(driver);
        checkoutPage.addNewAddress("Addr line 1 addr Line 2 addr line 3");
        checkoutPage.selectAddress("Addr line 1 addr Line 2 addr line 3");

        checkoutPage.placeOrder();
        Thread.sleep(3000);

        // String currentURL = driver.getCurrentUrl();


        wait.until(ExpectedConditions.urlToBe("https://crio-qkart-frontend-qa.vercel.app/thanks"));


        String presentUrl = driver.getCurrentUrl();

        int size = driver.findElements(By.xpath("//iframe")).size();

        // status = advertisements.size() == 3;

        int buyNowSize = driver.findElements(By.xpath("//button[text() = 'Buy Now']")).size();

        driver.switchTo().frame(driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe[1]")));
        System.out.println("Switched to frame 1");
        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[text() = 'Buy Now']"))));
        driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();

        driver.switchTo().parentFrame();
        driver.navigate().back();
        status = !driver.getCurrentUrl().equals(presentUrl);
        logStatus("Step", "Ad 1", status ? "PASS" : "FAIL");

        driver.switchTo().frame(driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe[2]")));
        System.out.println("Switched to frame 2");
        wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[text() = 'Buy Now']"))));
        driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();

        driver.switchTo().parentFrame();
        status = !driver.getCurrentUrl().equals(presentUrl);
        logStatus("Step", "Ad 2", status ? "PASS" : "FAIL");



        logStatus("End Testcase ", "Testcase 11: Ensure that the links on QKART advertisement are clickable", status ? "PASS" : "FAIL");
        driver.close();
        return status;





        // WebDriverWait wait1 = new WebDriverWait(driver, 10);
        // for (int index = 1; index <= buyNowSize; index++) {
        //     driver.switchTo().frame(driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe["+ index +"]")));
        //     // Thread.sleep(3000);
        //     // System.out.println("Switched to frame: " + index);
        //     wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(By.xpath("//button[text() = 'Buy Now']"))));
        //     driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();
        //     Thread.sleep(5000);
        //     System.out.println("Clicked: " + index);
        //     driver.switchTo().defaultContent();
        // }


        // logStatus("Step", "Verify three advertisements are available", status ? "PASS" : "FAIL");
        // WebElement advertisement1 = driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe[1]"));
        // driver.switchTo().frame(advertisement1);

        // driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();

        // driver.switchTo().parentFrame();

        // status = !driver.getCurrentUrl().equals(currentURL);

        // logStatus("Step", "Verify that advertisement 1 is clickable", status ? "PASS" : "FAIL");

        // driver.getCurrentUrl();
        // Thread.sleep(5000);

        // WebElement advertisement2 = driver.findElement(By.xpath("//*[@id='root']/div/div[2]/div/iframe[2]"));
        // driver.switchTo().frame(advertisement2);

        // driver.findElement(By.xpath("//button[text() = 'Buy Now']")).click();


        // driver.switchTo().parentFrame();
        // status = !driver.getCurrentUrl().equals(currentURL);

        // logStatus("Step", "Verify that advertisement 2 is clickable", status ? "PASS" : "FAIL");

        // driver.getCurrentUrl();
        // Thread.sleep(3000);



    }

    public static void main(String[] args) throws Exception {
        int totalTests = 0;
        int passedTests = 0;
        Boolean status;
        // Maximize and Implicit Wait for things to initailize

        RemoteWebDriver driver = createDriver();

        driver.manage().window().maximize();
        driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);

        try {
            // Execute Test Case 1
            totalTests += 1;
            status = TestCase01(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 2
            totalTests += 1;
            status = TestCase02(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
            // // Execute Test Case 3
            totalTests += 1;
            status = TestCase03(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 4
            totalTests += 1;
            status = TestCase04(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 5
            totalTests += 1;
            status = TestCase05(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // // Execute Test Case 6
            totalTests += 1;
            status = TestCase06(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 7
            totalTests += 1;
            status = TestCase07(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");


            // Execute Test Case 8
            totalTests += 1;
            status = TestCase08(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 9
            totalTests += 1;
            status = TestCase09(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 10
            totalTests += 1;
            status = TestCase10(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");

            // Execute Test Case 11
            totalTests += 1;
            status = TestCase11(driver);
            if (status) {
                passedTests += 1;
            }

            System.out.println("");
        } catch (Exception e) {
            throw e;
        } finally {
            // quit Chrome Driver
            driver.quit();

            System.out.println(String.format("%s out of %s test cases Passed ", Integer.toString(passedTests),
                    Integer.toString(totalTests)));
        }

    }
}